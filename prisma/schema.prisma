generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["prismaSchemaFolder", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserType {
  ADMIN
  PARENT
}

model users {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  passwordHash      String
  userType          UserType
  phoneNumber       String?
  address           String?
  dateOfBirth       DateTime?
  profileImageUrl   String?
  bio               String?
  emailVerified     DateTime?
  verificationToken String?        @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resetToken        String?        @unique
  resetTokenExpires DateTime?
  roleId            String?
  role              Role?          @relation(fields: [roleId], references: [id])
  activities        UserActivity[]
  sessions          sessions[]
  children          Children[]
  bookLoans         BookLoan[]
}

model sessions {
  id        String   @id @default(uuid()) @map("session_token")
  userId    String   @map("user_id")
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ReadingProgress {
  id        String    @id @default(uuid())
  childId   String
  bookId    String
  pagesRead Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  child     Children  @relation(fields: [childId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[]
  users       users[]
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   String?
  timestamp DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id])
}

model Children {
  id              String            @id @default(uuid())
  name            String
  age             Int
  grade           String
  school          String
  parentId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  parent          users             @relation(fields: [parentId], references: [id])
  bookLoans       BookLoan[]
  readingProgress ReadingProgress[]
  points          Int               @default(0)
}

model Book {
  id              String            @id @default(uuid())
  title           String
  author          String
  genre           String
  description     String?
  availableCopies Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bookLoans       BookLoan[]
  ReadingProgress ReadingProgress[]
}

model BookLoan {
  id         String    @id @default(uuid())
  userId     String
  childId    String
  bookId     String
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  user       users     @relation(fields: [userId], references: [id])
  child      Children  @relation(fields: [childId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])
}

model VerificationToken {
  id      String   @id @default(uuid())
  token   String
  expires DateTime

  @@index([token])
  @@map("verification_tokens")
}
